// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  firstName           String?
  lastName            String?
  username            String?        @unique
  email               String         @unique
  emailVerified       DateTime?
  password            String?
  phoneNumber         String?        @unique
  accounts            Account[]
  sessions            Session[]
  image               String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  role                Role           @default(VOLUNTEER)
  registrations       Registration[]
  postedOpportunities Opportunity[]  @relation("PostedOpportunities")
}

model Opportunity {
  id            String         @id @default(cuid())
  title         String
  description   String?
  date          DateTime
  locationName  String
  address       String?
  latitude      Float
  longitude     Float
  organizerId   String
  organizer     User           @relation("PostedOpportunities", fields: [organizerId], references: [id], onDelete: Cascade)
  registrations Registration[]
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Registration {
  id            String      @id @default(cuid())
  userId        String
  opportunityId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  status        Status      @default(APPLIED)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, opportunityId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  VOLUNTEER
  ORGANIZER
  ADMIN
}

enum Status {
  APPLIED
  APPROVED
  REJECTED
  CANCELED_BY_USER
  COMPLETED
}
